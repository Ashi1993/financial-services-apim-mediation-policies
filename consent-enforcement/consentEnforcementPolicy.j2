<!--
 ~ Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 ~
 ~ WSO2 LLC. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~     http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied. See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->

<!-- Storing the original request URI and payload for future reference -->
<property name="originalEndpointURI" expression="get-property('To')" scope="default" type="STRING"/>
<property name="originalRequestPayload" expression="json-eval($)" scope="default" type="STRING"/>

<!-- This class mediator is responsible for generating the payload for the consent validation service and is stored in the property 'consentEnforcementJwtPayload' -->
<class name="org.wso2.financial.services.apim.mediation.policies.consent.enforcement.ConsentEnforcementPayloadMediator">
    <property name="consentIdClaimName" value="{{consentIdClaimName}}"/>
</class>

<!-- Set the request payload -->
<payloadFactory media-type="text">
    <format>$1</format>
    <args>
        <arg expression="get-property('consentEnforcementJwtPayload')" />
    </args>
</payloadFactory>

<!-- Set the request headers required for calling the consent validation service -->
<header name="Authorization" scope="transport" value="Basic {{consentServiceBasicAuthCredentials}}"/>
<header name="Content-Type" scope="transport" value="application/jwt"/>

<!-- Set the 'messageType' property required by the axis2 layer, this property controls how Synapse serializes the request body -->
<property name="messageType" scope="axis2" value="application/jwt"/>

<!-- Call the consent validation endpoint -->
<call>
    <endpoint>
        <http method="POST" uri-template="{{consentServiceBaseUrl}}/api/fs/consent/validate/validate"/>
    </endpoint>
</call>

<!-- Extract required attributes from the response JSON into properties -->
<property name="isValid" expression="json-eval($.isValid)" scope="default" type="BOOLEAN"/>
<property name="modifiedPayload" expression="json-eval($.modifiedPayload)" scope="default" type="STRING"/>
<property name="consentInformation" expression="json-eval($.consentInformation)" scope="default" type="STRING"/>

<!-- Check if 'isValid' is true -->
<filter source="get-property('isValid')" regex="true">
    <then>
        <!-- Consent is valid -->
        <filter xpath="boolean(get-property('modifiedPayload'))">
            <then>
                <!-- Set 'modifiedPayload' as new request body if available -->
                <payloadFactory media-type="json">
                    <format>$1</format>
                    <args>
                        <arg expression="get-property('modifiedPayload')"/>
                    </args>
                </payloadFactory>
            </then>
            <else>
                <!-- 'modifiedPayload' is null -->
                <!-- Set 'originalRequestPayload' as the request body when 'modifiedPayload' is not available -->
                <payloadFactory media-type="json">
                    <format>$1</format>
                    <args>
                        <arg expression="get-property('originalRequestPayload')"/>
                    </args>
                </payloadFactory>
            </else>
        </filter>

        <filter xpath="boolean(get-property('consentInformation'))">
            <then>
                <!-- Set 'consentInformation' as an HTTP header if available -->
                <header name="Account-Request-Information" scope="transport" expression="get-property('consentInformation')"/>
            </then>
            <else>
                <!-- 'consentInformation' is null -->
            </else>
        </filter>
    </then>

    <else>
        <!-- Consent is not valid -->
        <!-- TODO: handle error properly -->
    </else>
</filter>
